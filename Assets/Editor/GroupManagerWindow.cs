// File: GroupManagerWindow.cs
using UnityEngine;
using UnityEditor;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class GroupManagerWindow : EditorWindow
{
    private const string ITEMS_DATA_FOLDER = "Assets/GameData/Items";
    private const string GROUPS_FOLDER = "Assets/GameData/Groups";
    private const int DESIRED_ITEM_COUNT = 4;
    private const float ITEM_BLOCK_WIDTH = 64; 
    private const float ITEM_BLOCK_HEIGHT = 50f;

    private List<GroupData> _allGroups = new List<GroupData>();
    private List<ItemData> _allItems = new List<ItemData>();
    private Dictionary<GroupData, bool> _groupFoldouts = new Dictionary<GroupData, bool>();
    
    private Vector2 _scrollPosition;
    private Vector2 _groupScrollPosition;
    private Vector2 _itemPoolScrollPosition; // –≠—Ç–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π
    
    private string _groupSearch = "";
    private string _itemSearch = "";
    private string _newGroupName = "";

    [MenuItem("Game Tools/Group Manager")]
    public static void ShowWindow()
    {
        GetWindow<GroupManagerWindow>("Group Manager").minSize = new Vector2(400, 600);
    }

    private void OnEnable() => ReloadAllData();
    
    private void ReloadAllData()
    {
        _allGroups = LoadAssets<GroupData>(new[] { GROUPS_FOLDER }).OrderBy(g => g.name).ToList();
        _allItems = LoadAssets<ItemData>(new[] { ITEMS_DATA_FOLDER }).OrderBy(i => i.name).ToList();
        
        foreach (var group in _allGroups)
        {
            // –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã –æ—Ç null-—Å—Å—ã–ª–æ–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
            CleanGroupItems(group);

            if (!_groupFoldouts.ContainsKey(group))
            {
                _groupFoldouts[group] = false;
            }
        }
    }

    private List<T> LoadAssets<T>(string[] searchInFolders) where T : Object =>
        AssetDatabase.FindAssets($"t:{typeof(T).Name}", searchInFolders)
            .Select(AssetDatabase.GUIDToAssetPath)
            .Select(AssetDatabase.LoadAssetAtPath<T>)
            .Where(a => a != null)
            .ToList();

    private void OnGUI()
    {
        EditorGUILayout.LabelField("Group & Item Manager", new GUIStyle(EditorStyles.largeLabel) { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold });
        EditorGUILayout.Space(10);

        _scrollPosition = EditorGUILayout.BeginScrollView(_scrollPosition);
        
        DrawSection("1. Group Manager & Creator", DrawGroupManager, GUILayout.ExpandHeight(true)); 
        DrawSection("2. Item Pool (Search to view)", DrawItemPool, GUILayout.MinHeight(250)); 

        EditorGUILayout.EndScrollView();

        if (Event.current.type == EventType.DragUpdated || Event.current.type == EventType.DragPerform) Repaint();
        if (GUI.changed) AssetDatabase.SaveAssets();
    }
    
    // ... (–ú–µ—Ç–æ–¥—ã DrawSection, DrawSearchToolbar, DrawGroupManager –∏ –¥—Ä—É–≥–∏–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –≤—ã–∑–æ–≤–∞ CheckForIntersections)

    private void DrawSection(string title, System.Action content, params GUILayoutOption[] options)
    {
        EditorGUILayout.BeginVertical(EditorStyles.helpBox, options);
        EditorGUILayout.LabelField(title, EditorStyles.boldLabel);
        EditorGUILayout.Separator();
        content?.Invoke();
        EditorGUILayout.Space(5);
        EditorGUILayout.EndVertical();
        EditorGUILayout.Space(10);
    }
    
    private void DrawSearchToolbar(ref string searchString)
    {
        EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
        searchString = EditorGUILayout.TextField(GUIContent.none, searchString, EditorStyles.toolbarSearchField);
        if (GUILayout.Button(new GUIContent("X", "Clear Search"), EditorStyles.toolbarButton, GUILayout.Width(25)))
        {
            searchString = "";
            GUI.FocusControl(null);
        }
        EditorGUILayout.EndHorizontal();
    }
    
    private void DrawGroupManager()
    {
        DrawSearchToolbar(ref _groupSearch);

        if (!_allGroups.Any() && string.IsNullOrEmpty(_groupSearch))
        {
            EditorGUILayout.LabelField("No groups found. Create one below.");
        }

        _groupScrollPosition = EditorGUILayout.BeginScrollView(_groupScrollPosition, "box", GUILayout.ExpandHeight(true));
        
        GroupData groupToRemove = null;
        string s = _groupSearch.ToLower();

        foreach (var group in _allGroups.Where(g => g != null && 
            (string.IsNullOrEmpty(s) || g.name.ToLower().Contains(s) || (g.groupKey != null && g.groupKey.ToLower().Contains(s)))))
        {
            EditorGUILayout.BeginVertical(EditorStyles.helpBox);
            
            EditorGUILayout.BeginHorizontal();
            
            bool fold = _groupFoldouts.GetValueOrDefault(group, false);

            Color originalBgColor = GUI.backgroundColor;
            if (group.items.Count(i => i != null) != DESIRED_ITEM_COUNT)
            {
                GUI.backgroundColor = Color.yellow; 
            }

            string headerContent = GetNameWithoutPrefix(group.name, "group_");

            fold = EditorGUILayout.Foldout(fold, new GUIContent(headerContent), true, EditorStyles.foldoutHeader);
            _groupFoldouts[group] = fold;
            
            GUI.backgroundColor = originalBgColor;

            if (GUILayout.Button(new GUIContent("üóëÔ∏è", "Delete Group"), EditorStyles.miniButton, GUILayout.Width(35), GUILayout.Height(22)) &&
                EditorUtility.DisplayDialog("Confirm Deletion", $"Are you sure you want to delete group '{group.name}'?", "Yes", "No"))
            {
                groupToRemove = group;
            }
            
            EditorGUILayout.EndHorizontal();

            if (_groupFoldouts[group])
            {
                // *** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/—Å–æ–æ–±—â–µ–Ω–∏—è ***
                CheckForIntersections(group); // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É

                EditorGUI.indentLevel++;
                
                string newGroupKey = EditorGUILayout.TextField("Group Key:", group.groupKey);
                if (newGroupKey != group.groupKey)
                {
                    Undo.RecordObject(group, "Rename Group Key");
                    group.groupKey = newGroupKey;
                    EditorUtility.SetDirty(group);
                }
                
                EditorGUI.indentLevel--;

                EditorGUILayout.LabelField("Items:", EditorStyles.miniBoldLabel);
                DrawGroupItemsInRow(group);
            }
            
            EditorGUILayout.EndVertical();

            HandleGroupDrop(GUILayoutUtility.GetLastRect(), group); 
        }

        EditorGUILayout.Space(10);
        DrawNewGroupCreationArea();
        
        EditorGUILayout.EndScrollView();

        if (groupToRemove != null)
        {
            AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(groupToRemove));
            ReloadAllData();
        }
    }
    
    private void DrawGroupItemsInRow(GroupData group)
    {
        // 2. Window with group items has minimum height
        EditorGUILayout.BeginVertical(EditorStyles.helpBox, GUILayout.MinHeight(80)); 
        
        List<ItemData> itemsToRemove = new List<ItemData>();
        
        // 3. Wrapping logic
        float currentX = 0;
        const float SPACING = 5f; 
        const float ROW_SPACING = 8f; 

        EditorGUILayout.BeginHorizontal(); 
        GUILayout.FlexibleSpace(); 

        float viewWidth = EditorGUIUtility.currentViewWidth - 60; 
        int itemsInCurrentRow = 0;
        
        for (int i = 0; i < group.items.Count; i++)
        {
            var item = group.items[i];
            // –ü–æ—Å–∫–æ–ª—å–∫—É null-—Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã CleanGroupItems(), 
            // —ç—Ç–æ—Ç if (item == null) continue; —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            if (item == null) continue;
            
            float requiredWidth = ITEM_BLOCK_WIDTH + SPACING; 
            
            if (currentX + requiredWidth > viewWidth && itemsInCurrentRow > 0)
            {
                GUILayout.FlexibleSpace(); 
                EditorGUILayout.EndHorizontal();
                
                GUILayout.Space(ROW_SPACING); 
                
                EditorGUILayout.BeginHorizontal(); 
                GUILayout.FlexibleSpace(); 
                currentX = 0; 
                itemsInCurrentRow = 0;
            }

            EditorGUILayout.BeginVertical(GUILayout.Width(ITEM_BLOCK_WIDTH));
            DrawItemPreview(item, ITEM_BLOCK_WIDTH, ITEM_BLOCK_HEIGHT);

            if (GUILayout.Button("‚ûñ", EditorStyles.miniButton, GUILayout.Height(15)))
            {
                itemsToRemove.Add(item);
            }
            EditorGUILayout.EndVertical();
            
            currentX += requiredWidth;
            itemsInCurrentRow++;
            
            if (i < group.items.Count - 1 && currentX + requiredWidth <= viewWidth)
            {
                 GUILayout.Space(SPACING);
            }
        }
        
        GUILayout.FlexibleSpace(); 
        EditorGUILayout.EndHorizontal(); 
        EditorGUILayout.EndVertical(); 
        
        if (itemsToRemove.Any())
        {
            Undo.RecordObject(group, "Remove Item from Group");
            foreach (var item in itemsToRemove) group.items.Remove(item);
            EditorUtility.SetDirty(group);
        }
    }
    
    private void DrawItemPreview(ItemData item, float width, float height)
    {
        EditorGUILayout.BeginVertical(GUILayout.Width(width));

        Rect rect = GUILayoutUtility.GetRect(width, height);
        
        Rect iconRect = new Rect(rect.x + (width - 32) / 2, rect.y, 32f, 32f); 
        
        if (item.icon != null && item.icon.texture != null)
        {
            Texture2D tex = item.icon.texture;
            Rect texRect = item.icon.textureRect;
            Rect texCoords = new Rect(texRect.x / tex.width, texRect.y / tex.height, texRect.width / tex.width, texRect.height / tex.height);
            
            float aspect = texRect.width / texRect.height;
            float drawW = 32f;
            float drawH = 32f;
            if (aspect > 1f) drawH = 32f / aspect; else drawW = 32f * aspect;
            float offsetX = (32f - drawW) / 2f;
            float offsetY = (32f - drawH) / 2f;
            
            GUI.DrawTextureWithTexCoords(new Rect(iconRect.x + offsetX, iconRect.y + offsetY, drawW, drawH), tex, texCoords);
        }
        else
        {
            EditorGUI.LabelField(iconRect, "‚ùì", new GUIStyle(EditorStyles.label) { fontSize = 24, alignment = TextAnchor.MiddleCenter });
        }
        
        string itemName = GetNameWithoutPrefix(item.name, "Item_");
        Rect labelRect = new Rect(rect.x, rect.y + 32, width, 18);
        EditorGUI.LabelField(labelRect, itemName, new GUIStyle(EditorStyles.miniLabel) { alignment = TextAnchor.MiddleCenter, wordWrap = true });
        
        Event currentEvent = Event.current;
        if (rect.Contains(currentEvent.mousePosition) && currentEvent.type == EventType.MouseDrag)
        {
            DragAndDrop.PrepareStartDrag();
            DragAndDrop.objectReferences = new Object[] { item };
            DragAndDrop.StartDrag($"Dragging {item.name}");
            currentEvent.Use();
        }
        
        EditorGUILayout.EndVertical();
    }

    private void HandleGroupDrop(Rect dropRect, GroupData targetGroup)
    {
        Event currentEvent = Event.current;
        if (!dropRect.Contains(currentEvent.mousePosition)) return;
        
        if (currentEvent.type == EventType.DragUpdated)
        {
            if (DragAndDrop.objectReferences.Any(obj => obj is ItemData))
            {
                DragAndDrop.visualMode = DragAndDropVisualMode.Copy;
                currentEvent.Use();
            }
        }
        else if (currentEvent.type == EventType.DragPerform)
        {
            DragAndDrop.AcceptDrag();
            bool wasModified = false;
            foreach (var obj in DragAndDrop.objectReferences)
            {
                if (obj is ItemData draggedItem && !targetGroup.items.Contains(draggedItem))
                {
                    Undo.RecordObject(targetGroup, "Add Item to Group");
                    targetGroup.items.Add(draggedItem);
                    wasModified = true;
                }
            }
            if (wasModified)
            {
                EditorUtility.SetDirty(targetGroup);
                ReloadAllData(); 
            }
            currentEvent.Use();
        }
    }

    // === –ù–û–í–´–ô –ú–ï–¢–û–î: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç null-—Å—Å—ã–ª–æ–∫ ===
    private void CleanGroupItems(GroupData group)
    {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ null-—Å—Å—ã–ª–∫–∏
        var cleanedItems = group.items.Where(i => i != null).ToList();
        
        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç, –±—ã–ª–∏ null-—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        if (cleanedItems.Count != group.items.Count)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Undo –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            Undo.RecordObject(group, "Remove Null Items from Group");
            group.items = cleanedItems;
            EditorUtility.SetDirty(group);
            
            Debug.Log($"[GroupManager] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ {group.items.Count - cleanedItems.Count} –ø—É—Å—Ç—ã—Ö (null) —Å—Å—ã–ª–æ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã '{group.name}'.");
        }
    }

    // === –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–û: CheckForIntersections —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç —á–∏—Å—Ç–∫—É ===
    private void CheckForIntersections(GroupData group)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ null-—Å—Å—ã–ª–æ–∫ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        bool hadNullsBeforeCheck = group.items.Any(i => i == null);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        CleanGroupItems(group);

        // –ï—Å–ª–∏ null-—Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ –∏ —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —É–¥–∞–ª–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (hadNullsBeforeCheck && !group.items.Any(i => i == null))
        {
            EditorGUILayout.HelpBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –ø—É—Å—Ç—ã–µ (null) —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã. –ê—Å—Å–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω.", MessageType.Info);
        }
        
        // –ï—Å–ª–∏ null-—Å—Å—ã–ª–∫–∏ –±—ã–ª–∏, –Ω–æ CleanGroupItems –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è (—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å), –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É.
        if (group.items.Any(i => i == null))
        {
             EditorGUILayout.HelpBox("–ì—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –ø–æ–¥–¥–∞—é—â–∏–µ—Å—è —É–¥–∞–ª–µ–Ω–∏—é –ø—É—Å—Ç—ã–µ (null) —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Å—Å–µ—Ç –≤—Ä—É—á–Ω—É—é.", MessageType.Error);
        }
    }

    private void DrawItemPool()
    {
        // ... (–ª–æ–≥–∏–∫–∞ DrawItemPool –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        DrawSearchToolbar(ref _itemSearch);

        if (string.IsNullOrEmpty(_itemSearch) || _itemSearch.Length < 2)
        {
            EditorGUILayout.HelpBox("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—É–ª –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.", MessageType.Info);
            return;
        }

        string s = _itemSearch.ToLower();
        var filteredItems = _allItems.Where(item => item != null && 
                                                    (item.name.ToLower().Contains(s) || 
                                                     (item.itemKey != null && item.itemKey.ToLower().Contains(s)))).ToList();

        if (!filteredItems.Any())
        {
            EditorGUILayout.LabelField("No items found matching criteria.");
            return;
        }

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è Item Pool
        _itemPoolScrollPosition = EditorGUILayout.BeginScrollView(_itemPoolScrollPosition, "box", GUILayout.ExpandHeight(true));
        
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–µ—Ç–∫–∏
        float currentX = 0;
        const float SPACING = 5f; 
        const float ROW_SPACING = 8f; 

        EditorGUILayout.BeginHorizontal(); 
        GUILayout.FlexibleSpace(); 

        // –®–∏—Ä–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–æ–ª–ª–∞ Item Pool
        float viewWidth = EditorGUIUtility.currentViewWidth - 60; 
        int itemsInCurrentRow = 0;
        
        for (int i = 0; i < filteredItems.Count; i++)
        {
            var item = filteredItems[i];
            
            float requiredWidth = ITEM_BLOCK_WIDTH + SPACING; 
            
            if (currentX + requiredWidth > viewWidth && itemsInCurrentRow > 0)
            {
                GUILayout.FlexibleSpace(); 
                EditorGUILayout.EndHorizontal();
                
                GUILayout.Space(ROW_SPACING); 
                
                EditorGUILayout.BeginHorizontal(); 
                GUILayout.FlexibleSpace(); 
                currentX = 0; 
                itemsInCurrentRow = 0;
            }

            DrawItemPreview(item, ITEM_BLOCK_WIDTH, ITEM_BLOCK_HEIGHT);
            
            currentX += requiredWidth;
            itemsInCurrentRow++;
            
            if (i < filteredItems.Count - 1 && currentX + requiredWidth <= viewWidth)
            {
                 GUILayout.Space(SPACING);
            }
        }
        
        GUILayout.FlexibleSpace(); 
        EditorGUILayout.EndHorizontal(); 

        EditorGUILayout.EndScrollView();
    }
    
    private void DrawNewGroupCreationArea()
    {
        EditorGUILayout.LabelField("Create New Group", EditorStyles.boldLabel);
        
        _newGroupName = EditorGUILayout.TextField("New Group Key", _newGroupName);
        EditorGUILayout.Space(5);
        
        bool canCreate = !string.IsNullOrEmpty(_newGroupName) && 
                         !_allGroups.Any(g => g.groupKey == _newGroupName || g.name == $"group_{_newGroupName}");

        DrawGenerateButton("Create Group Asset (Empty)", canCreate, CreateGroupAsset);
    }

    private void DrawGenerateButton(string text, bool enabled, System.Action onClick)
    {
        GUI.enabled = enabled;
        if (GUILayout.Button(text, GUILayout.Height(30))) onClick();
        GUI.enabled = true;
    }
    
    private string GetNameWithoutPrefix(string name, string prefix) =>
        name.StartsWith(prefix) ? name.Substring(prefix.Length) : name;

    private void CreateGroupAsset()
    {
        EnsureFolderExists(GROUPS_FOLDER);
        var newGroup = CreateInstance<GroupData>(); 
        newGroup.groupKey = _newGroupName;

        string path = Path.Combine(GROUPS_FOLDER, $"group_{_newGroupName}.asset");
        string uniquePath = AssetDatabase.GenerateUniqueAssetPath(path);

        AssetDatabase.CreateAsset(newGroup, uniquePath);
        
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
        EditorUtility.FocusProjectWindow();
        Selection.activeObject = newGroup;
        Debug.Log($"–°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ '{_newGroupName}'.");

        _newGroupName = "";
        ReloadAllData();
    }

    private void EnsureFolderExists(string path)
    {
        if (!Directory.Exists(path))
            Directory.CreateDirectory(path);
    }
}